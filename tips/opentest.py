import sys
from PyQt5.QtWidgets import (QApplication, QMainWindow, QLabel,
                             QVBoxLayout, QWidget)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPixmap
import random

class BCIExperiment(QMainWindow):
    def __init__(self):
        super().__init__()

        # 实验参数设置
        self.durations = {
            'ready': 2000,  # 准备阶段2秒
            'action': 4000,  # 动作想象4秒
            'rest': 2000  # 休息2秒
        }

        # 初始化界面
        self.initUI()

        # 加载图片资源
        self.load_images()

        # 状态管理
        self.states = ['ready', 'action', 'rest']
        self.current_state = None
        self.current_hand = None
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.next_state)

        # 开始实验
        self.start_experiment()

    def initUI(self):
        # 设置全屏窗口
        self.setWindowTitle('运动想象实验')
        #self.showFullScreen()
        self.setWindowFlags(Qt.WindowCloseButtonHint | Qt.WindowMinimizeButtonHint)

        # 创建中心控件
        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        # 图片显示标签
        self.image_label = QLabel(self)
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setStyleSheet("background-color: black;")

        # 布局设置
        layout = QVBoxLayout()
        layout.addWidget(self.image_label)
        self.central_widget.setLayout(layout)

    def load_images(self):
        # 加载所有实验图片
        self.images = {
            'ready': QPixmap("ready.png"),  # 准备图片（如十字）
            'left': QPixmap("left.png"),  # 左手提示图
            'right': QPixmap("right.png"),  # 右手提示图
            'rest': QPixmap("break.png")  # 休息提示图
        }

    def start_experiment(self):
        """启动实验流程"""
        self.current_trial = 0
        self.next_trial()

    def next_trial(self):
        """开始下一个试次"""
        self.current_trial += 1
        print(f"开始第 {self.current_trial} 个试次")

        # 随机选择左右手（示例使用交替模式，实际可改为随机）
        #随机
        #self.current_hand = 'left' if random.choice([True, False]) else 'right'
        self.current_hand = 'left' if self.current_trial % 2 == 1 else 'right'
        self.update_state('ready')

    def update_state(self, new_state):
        """更新实验状态"""
        self.current_state = new_state
        print(f"状态更新: {self.current_state}")

        # 更新显示图片
        if self.current_state == 'ready':
            self.show_image('ready')
        elif self.current_state == 'action':
            self.show_image(self.current_hand)
        elif self.current_state == 'rest':
            self.show_image('rest')
        elif self.current_state == 'image':
            self.show_image('image')

        # 启动定时器
        self.timer.start(self.durations[self.current_state])

    def show_image(self, image_type):
        """显示指定类型的图片"""
        if image_type in self.images:
            self.image_label.setPixmap(self.images[image_type])
        else:
            print(f"警告: 未找到 {image_type} 对应的图片")

    def next_state(self):
        """状态机切换"""
        self.timer.stop()
        if self.current_state == 'ready':
            self.update_state('action')
        elif self.current_state == 'action':
            self.update_state('rest')
        elif self.current_state == 'rest':
            if self.current_trial < 10:  # 运行10个试次
                self.next_trial()
            else:
                self.end_experiment()

    def end_experiment(self):
        """结束实验"""
        print("实验结束")
        self.close()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = BCIExperiment()
    ex.show()
    sys.exit(app.exec_())